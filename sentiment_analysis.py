# -*- coding: utf-8 -*-
"""sentiment_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1abo090LAkOP8jBhVZD_NT9RLajUjlDhI
"""

# sentiment_model_custom_columns.py

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

if __name__ == "__main__":
    # Update paths to your dataset files
    TRAINING_FILE = "/content/drive/MyDrive/Colab Notebooks/twitter_training.csv"
    VALIDATION_FILE = "/content/drive/MyDrive/Colab Notebooks/twitter_validation.csv"


    train_df = pd.read_csv(TRAINING_FILE, header=None)
        # Assign meaningful column names
    train_df.columns = ['ID', 'Platform', 'Sentiment', 'Text']

        # Drop rows with missing text
    train_df = train_df.dropna(subset=['Text'])
    print("First few rows after loading and cleaning:")
    print(train_df.head())

    val_df = pd.read_csv(VALIDATION_FILE, header=None)
        # Assign meaningful column names
    val_df.columns = ['ID', 'Platform', 'Sentiment', 'Text']

        # Drop rows with missing text
    val_df = val_df.dropna(subset=['Text'])
    print("First few rows after loading and cleaning:")
    print(val_df.head())

    classifier, vectorizer = preprocess_and_train(train_df)
    X_val = vectorizer.transform(val_df['Text'])
    y_val = val_df['Sentiment']

    predictions = classifier.predict(X_val)
    print("\nClassification Report:\n", classification_report(y_val, predictions))
    print("Accuracy Score:", accuracy_score(y_val, predictions))

def preprocess_and_train(train_df):
    """
    Preprocesses the text data and trains a logistic regression model.

    :param train_df: DataFrame containing 'Text' and 'Sentiment' columns for training.
    :return: Trained classifier and vectorizer.
    """
    # Handle missing or non-string values
    train_df.info()
    #train_df['Text'] = train_df['Text'].fillna("").astype(str)

    # Check for completely empty or whitespace-only texts
    train_df = train_df[train_df['Text'].str.strip() != ""]

    if train_df.empty:
        raise ValueError("Training data is empty after preprocessing. Check your dataset.")

    vectorizer = TfidfVectorizer(max_features=5000, stop_words=None)  # Adjust stop_words=None to allow all words
    X_train = vectorizer.fit_transform(train_df['Text'])
    y_train = train_df['Sentiment']

    classifier = LogisticRegression(max_iter=1000)
    classifier.fit(X_train, y_train)

    return classifier, vectorizer